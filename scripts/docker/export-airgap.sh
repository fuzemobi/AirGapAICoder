#!/bin/bash
# Export AirGapAICoder container and dependencies for air-gap deployment
# Version: 1.2.0
# Author: Fuzemobi, LLC - Chad Rosenbohm

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Configuration
IMAGE_NAME="${IMAGE_NAME:-airgap-ollama}"
IMAGE_TAG="${IMAGE_TAG:-latest}"
OUTPUT_DIR="${OUTPUT_DIR:-$HOME/airgap-package}"
INCLUDE_MODELS="${INCLUDE_MODELS:-false}"
MODELS_DIR="${MODELS_DIR:-$HOME/.ollama/models}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_container_runtime() {
    if command -v docker &> /dev/null; then
        echo "docker"
    elif command -v podman &> /dev/null; then
        echo "podman"
    else
        log_error "Neither Docker nor Podman found."
        exit 1
    fi
}

check_image_exists() {
    local runtime=$1
    if ! $runtime images "$IMAGE_NAME:$IMAGE_TAG" --format "{{.Repository}}:{{.Tag}}" | grep -q "$IMAGE_NAME:$IMAGE_TAG"; then
        log_error "Image $IMAGE_NAME:$IMAGE_TAG not found!"
        log_info "Build the image first: ./scripts/docker/build-all-platforms.sh"
        exit 1
    fi
}

create_output_directory() {
    log_info "Creating output directory: $OUTPUT_DIR"
    mkdir -p "$OUTPUT_DIR/container"
    mkdir -p "$OUTPUT_DIR/config"
    mkdir -p "$OUTPUT_DIR/docs"
}

export_container_image() {
    local runtime=$1

    log_info "Exporting container image..."
    local image_file="$OUTPUT_DIR/container/airgap-ollama-$IMAGE_TAG.tar"

    $runtime save "$IMAGE_NAME:$IMAGE_TAG" -o "$image_file"

    if [ -f "$image_file" ]; then
        local size=$(du -h "$image_file" | cut -f1)
        log_success "Image exported: $image_file ($size)"
    else
        log_error "Failed to export image"
        exit 1
    fi
}

copy_compose_files() {
    log_info "Copying Docker Compose files..."

    cp "$PROJECT_ROOT/docker-compose.air-gap.yml" "$OUTPUT_DIR/container/"
    cp "$PROJECT_ROOT/docker-compose.yml" "$OUTPUT_DIR/container/" 2>/dev/null || true

    log_success "Compose files copied"
}

copy_configuration() {
    log_info "Copying configuration files..."

    # Copy modelfiles
    if [ -d "$PROJECT_ROOT/config/modelfiles" ]; then
        cp -r "$PROJECT_ROOT/config/modelfiles" "$OUTPUT_DIR/config/"
    fi

    # Copy cline config examples
    if [ -d "$PROJECT_ROOT/config/cline" ]; then
        cp -r "$PROJECT_ROOT/config/cline" "$OUTPUT_DIR/config/" 2>/dev/null || true
    fi

    log_success "Configuration files copied"
}

copy_documentation() {
    log_info "Copying documentation..."

    cp "$PROJECT_ROOT/README.md" "$OUTPUT_DIR/docs/" 2>/dev/null || true
    cp "$PROJECT_ROOT/docs/DOCKER-QUICKSTART.md" "$OUTPUT_DIR/docs/" 2>/dev/null || true
    cp "$PROJECT_ROOT/docs/CONTAINER-DEPLOYMENT.md" "$OUTPUT_DIR/docs/" 2>/dev/null || true
    cp "$PROJECT_ROOT/LICENSE" "$OUTPUT_DIR/" 2>/dev/null || true
    cp "$PROJECT_ROOT/VERSION" "$OUTPUT_DIR/" 2>/dev/null || true

    log_success "Documentation copied"
}

copy_models() {
    if [ "$INCLUDE_MODELS" = "true" ]; then
        if [ -d "$MODELS_DIR" ]; then
            log_info "Copying models from $MODELS_DIR..."
            log_warning "This may take a while (models can be 50GB+)..."

            mkdir -p "$OUTPUT_DIR/models"
            cp -r "$MODELS_DIR"/* "$OUTPUT_DIR/models/" || {
                log_error "Failed to copy models"
                return 1
            }

            local size=$(du -sh "$OUTPUT_DIR/models" | cut -f1)
            log_success "Models copied ($size)"
        else
            log_warning "Models directory not found: $MODELS_DIR"
        fi
    else
        log_info "Skipping model copy (use INCLUDE_MODELS=true to include)"
        mkdir -p "$OUTPUT_DIR/models"
        echo "Place your downloaded Ollama models here" > "$OUTPUT_DIR/models/README.txt"
    fi
}

create_deployment_script() {
    log_info "Creating deployment script..."

    cat > "$OUTPUT_DIR/container/load-and-run.sh" << 'EOF'
#!/bin/bash
# Air-Gap Deployment Script for AirGapAICoder
# Auto-generated by export-airgap.sh

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Detect container runtime
if command -v docker &> /dev/null; then
    RUNTIME="docker"
elif command -v podman &> /dev/null; then
    RUNTIME="podman"
else
    echo "ERROR: Neither Docker nor Podman found!"
    exit 1
fi

log_info "Using container runtime: $RUNTIME"

# Load image
log_info "Loading container image..."
$RUNTIME load -i airgap-ollama-latest.tar

log_success "Image loaded successfully"

# Create .env file
log_info "Creating .env file..."
cat > .env << ENVEOF
HOST_MODELS_DIR=$(pwd)/../models
HOST_LOGS_DIR=$(pwd)/../logs
HOST_CONFIG_DIR=$(pwd)/../config/modelfiles
OLLAMA_PORT=11434
ENVEOF

log_success ".env file created"

# Start container
log_info "Starting AirGapAICoder service..."
if command -v docker-compose &> /dev/null || command -v docker compose &> /dev/null; then
    docker compose -f docker-compose.air-gap.yml up -d 2>/dev/null || \
    docker-compose -f docker-compose.air-gap.yml up -d
else
    log_info "Docker Compose not found. Using direct docker run..."
    $RUNTIME run -d \
        --name airgap-ollama-server \
        --device nvidia.com/gpu=all \
        -p 11434:11434 \
        -v "$(pwd)/../models:/root/.ollama/models:rw" \
        -v "$(pwd)/../logs:/var/log/ollama:rw" \
        -e OLLAMA_HOST=0.0.0.0:11434 \
        airgap-ollama:latest
fi

log_success "AirGapAICoder is running!"

echo ""
echo "======================================================="
echo "  AirGapAICoder - Air-Gap Deployment Complete"
echo "======================================================="
echo ""
echo "Service is running on: http://localhost:11434"
echo ""
echo "Test with:"
echo "  curl http://localhost:11434/api/tags"
echo ""
echo "View logs:"
echo "  docker compose -f docker-compose.air-gap.yml logs -f"
echo ""
EOF

    chmod +x "$OUTPUT_DIR/container/load-and-run.sh"
    log_success "Deployment script created"
}

create_manifest() {
    log_info "Creating manifest file..."

    cat > "$OUTPUT_DIR/MANIFEST.txt" << EOF
AirGapAICoder - Air-Gap Deployment Package
==========================================

Package Created: $(date)
Version: $(cat "$PROJECT_ROOT/VERSION" 2>/dev/null || echo "unknown")

Contents:
---------
container/
  - airgap-ollama-$IMAGE_TAG.tar     (Container image)
  - docker-compose.air-gap.yml       (Compose configuration)
  - load-and-run.sh                  (Automated deployment script)

config/
  - modelfiles/                      (Ollama model configurations)

models/
  - (Place downloaded Ollama models here)

docs/
  - README.md                        (Project overview)
  - DOCKER-QUICKSTART.md             (Quick start guide)
  - CONTAINER-DEPLOYMENT.md          (Deployment documentation)

Deployment Instructions:
------------------------
1. Transfer this package to air-gap system via USB/removable media

2. Extract the package:
   tar -xzf airgap-package.tar.gz
   cd airgap-package

3. Run deployment script:
   cd container
   ./load-and-run.sh

4. Verify deployment:
   curl http://localhost:11434/api/tags

For detailed instructions, see docs/CONTAINER-DEPLOYMENT.md

System Requirements:
-------------------
- Docker 20.10+ or Podman 4.0+
- NVIDIA GPU with 24GB+ VRAM
- NVIDIA Container Toolkit
- 32GB+ system RAM
- 100GB+ free disk space

Support:
--------
GitHub: https://github.com/fuzemobi/AirGapAICoder
License: MIT
Author: Fuzemobi, LLC - Chad Rosenbohm
EOF

    log_success "Manifest created"
}

create_archive() {
    log_info "Creating compressed archive..."

    cd "$(dirname "$OUTPUT_DIR")"
    local archive_name="airgap-package-$(date +%Y%m%d).tar.gz"

    tar -czf "$archive_name" "$(basename "$OUTPUT_DIR")"

    if [ -f "$archive_name" ]; then
        local size=$(du -h "$archive_name" | cut -f1)
        log_success "Archive created: $archive_name ($size)"
        echo ""
        echo "Transfer this file to your air-gap system:"
        echo "  $(pwd)/$archive_name"
    else
        log_error "Failed to create archive"
        exit 1
    fi
}

# Main execution
main() {
    echo "======================================================="
    echo "  AirGapAICoder - Air-Gap Package Export"
    echo "======================================================="
    echo ""

    # Detect container runtime
    RUNTIME=$(detect_container_runtime)
    log_info "Using container runtime: $RUNTIME"

    # Check if image exists
    check_image_exists "$RUNTIME"

    # Create output directory structure
    create_output_directory

    # Export container image
    export_container_image "$RUNTIME"

    # Copy compose files
    copy_compose_files

    # Copy configuration
    copy_configuration

    # Copy documentation
    copy_documentation

    # Copy models (if requested)
    copy_models

    # Create deployment script
    create_deployment_script

    # Create manifest
    create_manifest

    # Create archive
    create_archive

    echo ""
    echo "======================================================="
    log_success "Air-gap package export complete!"
    echo "======================================================="
    echo ""
}

# Run main function
main "$@"
